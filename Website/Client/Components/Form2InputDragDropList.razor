@using Microsoft.AspNetCore.Components.Forms
@using Website.Client.Components.Base
@using Website.Client.Components.Default
@using Website.Client.Styles

<div class="@($"{Class} flex flex-row")">
    <Popup IsVisible="@IsPopupVisible"
           Title="Warning"
           FalseButton="Cancel"
           TrueButton="Proceed"
           Message="This article still has customers left. All customers will receive the first articles price in this list after the article is deleted. Do you wish to proceed?"
           OnClose="HandlePopupClose" />
    <div class="w-full mx-5">
        <div class="p-4 bg-gray-100 rounded-md justify-center w-full m-2">
            <h3 class="text-lg font-semibold mb-4 select-none">@TitleLeft</h3>
            <ul class="@($"{MaxHeight} w-full space-y-2 flex flex-col overflow-y-auto")"
                ondragover="event.preventDefault();"
                ondragstart="event.dataTransfer.setData('', event.target.id);">
                @foreach (var article in ArticleSummary.OrderBy(x => x.Position))
                {      
                    <li @ondrop="()=>HandleDrop(article)" @key="article"
                        @ondragleave="@(() => {article.IsDragOver = false;})"
                        @ondragenter="@(() => {article.IsDragOver = true;})"
                        @ondragstart="() => draggedItem = article"
                        @ondragend="() => draggedItem = null" draggable="@(Draggable.ToString())">
                        <div class="flex flex-row items-center">
                            @if (HasDefault)
                            {
                                <FormDefaultRadio Class="ml-1 mr-1" @bind-Value="@article.IsDefault" SelectedValue="@(() => HandleIsDefault(article))" />
                            }
                            <div class="flex flex-col mr-1">
                                <TextInput class="@($"{Scaling.GetTextScaling()} {ValidStateCss(() => article.Name)} {InputStyles.GetInputDefaultStyle()} bg-white")"
                                            Placeholder="@PlaceholderLeft"
                                            @bind-Value="@article.Name"
                                            ValidationFunction="@ValidationLeftFunction"
                                            TextChanged="@((value) => NameChanged(value, article))"
                                            IsDisabled="@article.IsDisabled"/>
                                <ValidationMessage class="@($"{Scaling.GetTextScaling()} text-red")" For="@(() => article.Name)" />
                            </div>
                            <div class="flex flex-col">
                                <TextInput class="@($"{Scaling.GetTextScaling()}  {ValidStateCss(() => article.Price)} {InputStyles.GetInputDefaultStyle()} bg-white")"
                                            Placeholder="@PlaceholderRight"
                                            @bind-Value="@article.Price"
                                            ValidationFunction="@ValidationRightFunction"
                                            TextChanged="@((value) => PriceChanged(value, article))"
                                            IsDisabled="@article.IsDisabled" />
                                <ValidationMessage class="@($"{Scaling.GetTextScaling()} text-red")" For="@(() => article.Price)" />
                            </div>
                            <button type="button" class="@($"{Scaling.GetTextScaling()} {ButtonStyles.GetButtonDefaultStyle()} min-w-fit ml-1")"
                                    @onclick="() => DeleteArticle(article.Position)">
                                Delete Article
                            </button>
                        </div>
                    </li>
                }
                <button type="button" class="@($"{Scaling.GetTextScaling()} {ButtonStyles.GetButtonDefaultStyle()}")" @onclick="() => AddArticle()">Add new Article</button>
                <button type="button" class="@($"{Scaling.GetTextScaling()} {ButtonStyles.GetButtonDefaultStyle()} ml-1")" @onclick="() => SortByName()">Sort by name</button>
            </ul>
            <ValidationMessage class="@($"{Scaling.GetTextScaling()} text-red w-full")" For="@For" />
        </div>
    </div>
    <div class="w-full mx-5">
        <div class="p-4 bg-gray-100 rounded-md justify-center w-full m-2">
            <h3 class="text-lg font-semibold mb-4 select-none">@TitleRight</h3>
            <ul class="@($"{MaxHeight} w-full space-y-2 flex flex-col overflow-y-auto")">
                @foreach (var article in ArticleSummary.OrderBy(x => x.Position))
                {
                    <li @ondrop="()=>HandleDrop(article)" @key="article"
                        @ondragleave="@(() => {article.IsDragOver = false;})"
                        @ondragenter="@(() => {article.IsDragOver = true;})"
                        @ondragstart="() => draggedItem = article"
                        @ondragend="() => draggedItem = null" draggable="@(Draggable.ToString())">
                        <div class="flex flex-row">
                            <div class="flex flex-col mr-1">
                                <TextInput class="@($"{Scaling.GetTextScaling()}  {ValidStateCss(() => article.NewName)} {InputStyles.GetInputDefaultStyle()} bg-white")"
                                           Placeholder="@PlaceholderLeft"
                                           @bind-Value="@article.NewName"
                                           ValidationFunction="@ValidationLeftFunction"/>
                                <ValidationMessage class="@($"{Scaling.GetTextScaling()} text-red")" For="@(() => article.NewName)" />
                            </div>
                            <div class="flex flex-col">
                                <TextInput class="@($"{Scaling.GetTextScaling()} {ValidStateCss(() => article.NewPrice)} {InputStyles.GetInputDefaultStyle()}bg-white")"
                                           Placeholder="@PlaceholderRight"
                                           @bind-Value="@article.NewPrice"
                                           ValidationFunction="@ValidationRightFunction"/>
                                <ValidationMessage class="@($"{Scaling.GetTextScaling()} text-red")" For="@(() => article.NewPrice)" />
                            </div>
                        </div>
                    </li>
                }
            </ul>
        </div>
    </div>
</div>