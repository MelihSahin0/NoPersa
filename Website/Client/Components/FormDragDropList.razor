@using Website.Client.Components.Base
@using Website.Client.Styles

<div class="@Class">
    <Popup IsVisible="@IsPopupVisible"
           Titel="Warning"
           FalseButton="Cancel"
           TrueButton="Proceed"
           Message="This route still has customers left. All customers will be archived after the route is deleted. Do you whish to proceed?"
           OnClose="HandlePopupClose"/>
    <div class="w-full">
        @if (DisplayFilter)
        {
            <TextInput class="@($"{Scaling.GetTextScaling()} {InputStyles.GetInpuptDefaultStyle()} {TextOrientation} border-black mb-5")"
                       Placeholder="Filter"
                       @bind-Value="@StartFilter"/>
        }
        <ul class="@($"{MaxHeight} w-full space-y-2 flex flex-col overflow-y-auto")"
            ondragover="event.preventDefault();"
            ondragstart="event.dataTransfer.setData('', event.target.id);">
            @foreach (var route in Routes.OrderBy(x => x.Position))
            {
                @if (string.IsNullOrWhiteSpace(StartFilter) || route.Name.ToLower().StartsWith(StartFilter.ToLower()))
                {
                    <li @ondrop="()=>HandleDrop(route)" @key="route"
                        @ondragleave="@(()=> {route.IsDragOver = false;})"
                        @ondragenter="@(()=>{route.IsDragOver = true;})"
                        @ondragstart="() => draggedItem = route"
                        @ondragend="()=> draggedItem = null" draggable="@(Draggable.ToString())">
                        <div class="flex flex-row">
                            <TextInput class="@($"{Scaling.GetTextScaling()}  {ValidStateCss(() => route.Name)} {InputStyles.GetInpuptDefaultStyle()} {TextOrientation}")"
                                       Placeholder="@Placeholder"
                                       @bind-Value="@route.Name"
                                       ValidationFunction="@ValidationFunction"/>
                            <button type="button" class="@($"{Scaling.GetTextScaling()} {ButtonStyles.GetButtonDefaultStyle()} min-w-fit ml-1")"
                                    @onclick="() => DeleteRoute(route.Position)">Delete Route</button>
                        </div>
                        <ValidationMessage class="@($"{Scaling.GetTextScaling()} text-red")" For="@(() => route.Name)" />
                    </li>
                }
            }
            <button type="button" class="@($"{Scaling.GetTextScaling()} {ButtonStyles.GetButtonDefaultStyle()}")" @onclick="() => AddRoute()">Add new Route</button>
        </ul>
    </div>
</div>