@page "/deliver"
@using Website.Client.Components;
@using Website.Client.Components.Base;
@using Website.Client.Components.Default;
@using Website.Client.Models
@using Website.Client.Styles
@using Website.Client.Validations;

<LoadingPopup IsVisible="@DeliverModel.IsSubmitting"/>
@if (!DeliverModel.CustomerDelivery.Any())
{
    <EditForm Model="DeliverModel" OnValidSubmit="@DeliverModel.GetRouteCustomers">
        <div class="max-w-full">
            <div class="flex flex-row max-w-full justify-between mb-2 pb-2 border-black border-b-2">
                <FormDefaultSelect Label="Select Route" @bind-Value="DeliverModel.RouteId" SelectInputs="DeliverModel.RouteSummary" />
                <button type="submit" class="@($"{ButtonStyles.GetButtonNavigationDefaultStyle()} bg-lightGreen mx-2")">Start route</button>
                <FormDayPicker Label="Date picker" @bind-Year="DeliverModel.Year" @bind-Month="DeliverModel.Month" @bind-Day="DeliverModel.Day"/>
            </div>
        </div>
    </EditForm>
}
else
{
    <EditForm Model="DeliverModel" OnValidSubmit="@DeliverModel.Submit">
        <div class="max-w-full flex flex-col">
            <div class="w-full flex flex-row">
                <div class="flex flex-row w-1/2 justify-between mb-2 pb-2 border-black border-b-2">   
                    <button type="button" disabled="@(!DeliverModel.ButtonPrevious)" @onclick="@DeliverModel.Previous" class="@($"{ButtonStyles.GetButtonNavigationDefaultStyle()} {(DeliverModel.ButtonPrevious ? "bg-lightGreen" : "bg-lightGray")} mx-2 select-none")">Previous</button>
                    <button type="button" disabled="@(!DeliverModel.ButtonNext)" @onclick="@DeliverModel.Next" class="@($"{ButtonStyles.GetButtonNavigationDefaultStyle()} {(DeliverModel.ButtonNext ? "bg-lightGreen" : "bg-lightGray")} mx-2 select-none")">Next</button>
                    <button type="submit" disabled="@(!DeliverModel.ButtonSubmit)" class="@($"{ButtonStyles.GetButtonNavigationDefaultStyle()} {(DeliverModel.ButtonSubmit ? "bg-lightGreen" : "bg-lightGray")} mx-2 select-none")">Submit</button>
                </div>
                <div class="flex flex-row w-1/2 justify-center mb-2 pb-2 border-black border-b-2">
                    <FormInputCheckbox Label="Use map" IsColumn="false" @bind-Value="@DeliverModel.DisplayMap" OnValueChangedCallback="@(() => DeliverModel.ShowMap())" />
                </div>
            </div>
            <div class="flex flex-row">
                <div class="@($"{(DeliverModel.DisplayMap ? "w-1/2" : "w-full")} self-center text-center")">
                    @if (DeliverModel.displayCustomer != null)
                    {
                        <h1 class="text-2xl select-none m-2">@DeliverModel.displayCustomer.Name</h1>
                        <h1 class="text-2xl select-none m-2">@DeliverModel.displayCustomer.Address</h1>
                        <p class="text-2xl select-none m-2">@DeliverModel.displayCustomer.DeliveryWishes</p>
                    }
                </div>
                @if (DeliverModel.DisplayMap)
                {
                    <div class="w-1/2">
                        <div id="map" class="w-full"></div>
                    </div>
                }
            </div>
        </div>
    </EditForm>
}